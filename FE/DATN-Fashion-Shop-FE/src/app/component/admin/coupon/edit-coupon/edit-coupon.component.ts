import {Component, OnInit} from '@angular/core';
import {MatTable} from '@angular/material/table';
import {MatIcon} from '@angular/material/icon';
import {FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators} from '@angular/forms';
import {CouponService} from '../../../../services/client/CouponService/coupon-service.service';
import {ApiResponse} from '../../../../dto/Response/ApiResponse';
import {HeaderAdminComponent} from '../../header-admin/header-admin.component';
import {HolidayServiceService} from '../../../../services/admin/HolidayService/holiday-service.service';
import {HolidayDTO} from '../../../../dto/HolidayDTO';
import {CommonModule, DatePipe, JsonPipe, NgClass} from '@angular/common';
import {CouponConfigDTO} from '../../../../dto/coupon/CouponConfigDTO';
import {TableComponent} from '../../table/table.component';


@Component({
  selector: 'app-edit-coupon',
  standalone: true,
  imports: [
    CommonModule,
    MatTable,
    MatIcon,
    ReactiveFormsModule,
    HeaderAdminComponent,
    DatePipe,
    FormsModule,
    JsonPipe,
    NgClass,
    TableComponent
  ],
  templateUrl: './edit-coupon.component.html',
  styleUrl: './edit-coupon.component.scss'
})
export class EditCouponComponent implements OnInit{

  couponData = {
    discountType: 'PERCENTAGE',
    discountValue: 0,
    minOrderValue: 0,
    expirationDays: 0,
    imageUrl: ""

  };
  minDiscountValue = 1;
  maxDiscountValue = 100;
  selectedHolidaySlug: string = '';
  selectedFile: File | undefined = undefined;
  isLoading = false;
  public holidays: HolidayDTO[] = [];
  selectedHolidayId: number | undefined | null = null;
  couponConfigs: { [key: string]: CouponConfigDTO } = {};


  constructor(
    private fb: FormBuilder,
    private holidayService: HolidayServiceService,
    private couponService: CouponService// Inject HolidayService
  ) {}

  ngOnInit() {
    this.isLoading = true;
    this.loadHolidays(); // G·ªçi API l·∫•y danh s√°ch ng√†y l·ªÖ
    this.onDiscountTypeChange(); // Thi·∫øt l·∫≠p gi√° tr·ªã min/max cho gi·∫£m gi√°
    this.isLoading = false;
    this.loadCouponConfigs()



  }
  loadHolidays() {
    this.holidayService.getHolidays().subscribe({
      next: (data) => {
        // console.log('üìå D·ªØ li·ªáu nh·∫≠n t·ª´ API:', data);
        this.holidays = data;

      },
      error: (err) => {
        console.error('‚ö†Ô∏è L·ªói khi t·∫£i danh s√°ch ng√†y l·ªÖ:', err);
      }
    });
  }
  loadCouponConfigs() {
    this.isLoading = true;  // B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫£i d·ªØ li·ªáu
    this.couponService.getValidCouponConfigs().subscribe({
      next: (data) => {
        this.couponConfigs = data;  // C·∫≠p nh·∫≠t couponConfigs v·ªõi d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ backend
        console.log('üìå Danh s√°ch m√£ gi·∫£m gi√°:', this.couponConfigs);
        this.isLoading = false;
      },
      error: (err) => {
        console.error('‚ö†Ô∏è L·ªói khi t·∫£i danh s√°ch m√£ gi·∫£m gi√°:', err);
        this.isLoading = false;  // K·∫øt th√∫c qu√° tr√¨nh t·∫£i d·ªØ li·ªáu khi c√≥ l·ªói
      }
    });
  }

  onHolidayChange(event: any) {
    console.log("Ng√†y l·ªÖ ƒë√£ ch·ªçn:", this.selectedHolidayId);
    const holiday = this.holidays.find(h => h.id == this.selectedHolidayId);
    if (holiday) {
      this.selectedHolidaySlug = this.convertToSlug(holiday.holidayName);
    } else {
      this.selectedHolidaySlug = ''; // ƒê·∫∑t v·ªÅ r·ªóng n·∫øu kh√¥ng c√≥ ng√†y l·ªÖ
    }
  }


  convertToSlug(text: string): string {
    return text
      .normalize("NFD") // T√°ch d·∫•u kh·ªèi k√Ω t·ª± g·ªëc
      .replace(/[\u0300-\u036f]/g, "") // X√≥a d·∫•u ti·∫øng Vi·ªát
      .replace(/\s+/g, "") // X√≥a kho·∫£ng tr·∫Øng
      .toLowerCase(); // Chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng
  }

  onFileSelected(event: any) {
    this.selectedFile = event.target.files[0];
  }
  createCoupon() {
    if (this.isLoading) return;
    if (!this.validateForm()) return;
    this.isLoading = true;
    this.couponService.createCoupon(this.selectedHolidaySlug, this.couponData, this.selectedFile)
      .subscribe({
        next: (response) => {
          console.log('üéâ T·∫°o m√£ gi·∫£m gi√° th√†nh c√¥ng:', response);

          this.isLoading = false;
        },
        error: (error) => {
          console.error('‚ö†Ô∏è L·ªói khi t·∫°o m√£ gi·∫£m gi√°:', error);
          this.isLoading = false;
        }
      });
this.loadCouponConfigs()
  }
  editCoupon(couponKey: string) {
    const selectedConfig = this.couponConfigs[couponKey];
    if (selectedConfig) {
      // T√¨m ng√†y l·ªÖ theo slug ƒë·ªÉ l·∫•y l·∫°i t√™n g·ªëc
      this.selectedHolidaySlug = this.revertSlugToHolidayName(couponKey);

      // T√¨m ng√†y l·ªÖ c√≥ slug t∆∞∆°ng ·ª©ng ƒë·ªÉ c·∫≠p nh·∫≠t selectedHolidayId
      const matchingHoliday = this.holidays.find(h => this.convertToSlug(h.holidayName) === couponKey);
      this.selectedHolidayId = matchingHoliday ? matchingHoliday.id : null;

      // Sao ch√©p d·ªØ li·ªáu v√†o form
      // @ts-ignore
      this.couponData = { ...selectedConfig };
    }
  }


  revertSlugToHolidayName(slug: string): string {
    const holiday = this.holidays.find(h => this.convertToSlug(h.holidayName) === slug);
    return holiday ? holiday.holidayName : slug; // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ slug ban ƒë·∫ßu
  }

  resetCoupon(couponKey: string) {
    if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫∑t l·∫°i d·ªØ li·ªáu m√£ gi·∫£m gi√°: ${couponKey}?`)) {
      this.couponService.resetCoupon(couponKey).subscribe({
        next: () => {
          console.log(`üóëÔ∏è ƒê√£ x√≥a m√£ gi·∫£m gi√°: ${couponKey}`);

          // X√ìA LU√îN KH·ªéI UI
          delete this.couponConfigs[couponKey];


          console.log("üìå Danh s√°ch m√£ gi·∫£m gi√° sau khi x√≥a:", this.couponConfigs);

        },
        error: (err: any) => {
          console.error(`‚ö†Ô∏è L·ªói khi ƒë·∫∑t l·∫°i m√£ gi·∫£m gi√°: ${couponKey}`, err);
        }
      });
    }
  }







  onDiscountTypeChange() {
    if (this.couponData.discountType === 'PERCENTAGE') {
      this.minDiscountValue = 1;
      this.maxDiscountValue = 100;
    } else {
      this.minDiscountValue = 100000;
      this.maxDiscountValue = 1000000;
    }
  }
  validateForm(): boolean {
    if (!this.couponData.discountValue ||
      this.couponData.discountValue < this.minDiscountValue ||
      this.couponData.discountValue > this.maxDiscountValue) {
      alert(`Gi√° tr·ªã gi·∫£m ph·∫£i t·ª´ ${this.minDiscountValue} ƒë·∫øn ${this.maxDiscountValue}`);
      return false;
    }
    if (!this.couponData.minOrderValue || this.couponData.minOrderValue < 100) {
      alert('Gi√° tr·ªã ƒë∆°n h√†ng t·ªëi thi·ªÉu ph·∫£i t·ª´ 100 tr·ªü l√™n.');
      return false;
    }
    if (!this.couponData.expirationDays ||
      this.couponData.expirationDays < 3 ||
      this.couponData.expirationDays > 30) {
      alert('S·ªë ng√†y h·∫øt h·∫°n ph·∫£i t·ª´ 3 ƒë·∫øn 30 ng√†y.');
      return false;
    }
    return true;
  }

  protected readonly Object = Object;
}
