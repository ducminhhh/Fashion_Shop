import {Component, OnInit} from '@angular/core';
import {FormsModule} from '@angular/forms';
import {ActivatedRoute, Router, RouterLink} from '@angular/router';
import {NavigationService} from '../../../services/Navigation/navigation.service';

import {TokenService} from '../../../services/token/token.service';
import {CouponLocalizedDTO} from '../../../dto/coupon/CouponClientDTO';
import {ApiResponse} from '../../../dto/Response/ApiResponse';
import {AddressDTO} from '../../../dto/address/AddressDTO';
import {CouponService} from '../../../services/client/CouponService/coupon-service.service';
import {CommonModule, DatePipe, DecimalPipe} from '@angular/common';
import {CartDTO} from '../../../dto/CartDTO';
import {CartService} from '../../../services/client/CartService/cart.service';
import {CookieService} from 'ngx-cookie-service';

@Component({
  selector: 'app-coupon',
  standalone: true,
  imports: [
    DatePipe,
    CommonModule,
    FormsModule,
    RouterLink,
    DecimalPipe
  ],
  templateUrl: './coupon.component.html',
  styleUrl: './coupon.component.scss'
})
export class CouponComponent implements OnInit {
  couponCode: string = '';
  selectedCoupon: CouponLocalizedDTO | null = null;
  userId: number | null = null; // userId ban ƒë·∫ßu l√† null
  coupons : CouponLocalizedDTO[] | null = null;
  message : string = '';

  cartData: CartDTO | null = null;
  sessionId?: string;

  constructor(private router: Router,
              private navigationService: NavigationService,
              private couponService: CouponService,
              private tokenService: TokenService,
              private activatedRoute: ActivatedRoute,
              private cartService: CartService,
              private cookieService: CookieService,

  ) {

  }
  ngOnInit() {
    this.sessionId = this.cookieService.get('SESSION_ID') || '';
    console.log(this.sessionId);
    this.userId = this.tokenService.getUserId()
    console.log(this.userId)// G·ªçi API khi component ƒë∆∞·ª£c kh·ªüi t·∫°o4
    this.loadCoupons()
    this.cartService.getAllCart(this.userId,this.sessionId ).subscribe({
      next: (response) => {
        this.cartData = response.data;
        console.log('Gi·ªè h√†ng:', this.cartData);
      },
      error: (error) => {
        console.error('L·ªói khi l·∫•y gi·ªè h√†ng:', error);
      }
    });


  }
  loadCoupons() {
    if (this.userId !== null) {
      this.couponService.getCouponsForUser(this.userId, 'vi').subscribe(
        (response: ApiResponse<CouponLocalizedDTO[]>) => {
          this.coupons = response.data
            .map(coupon => ({
              ...coupon,
              expirationDate: Array.isArray(coupon.expirationDate)
                ? new Date(
                  coupon.expirationDate[0], // NƒÉm
                  coupon.expirationDate[1] - 1, // Th√°ng (b·∫Øt ƒë·∫ßu t·ª´ 0)
                  coupon.expirationDate[2], // Ng√†y
                  coupon.expirationDate[3] || 0, // Gi·ªù
                  coupon.expirationDate[4] || 0, // Ph√∫t
                  coupon.expirationDate[5] || 0 // Gi√¢y
                )
                : new Date(coupon.expirationDate) // N·∫øu ƒë√£ l√† Date ho·∫∑c string th√¨ gi·ªØ nguy√™n
            }));

          // ‚úÖ Ki·ªÉm tra danh s√°ch ƒë√£ l·ªçc th√†nh c√¥ng
        },
        (error: any) => {
          console.error('L·ªói khi t·∫£i m√£ gi·∫£m gi√°:', error);
        }
      );
    } else {
      console.error('Kh√¥ng t√¨m th·∫•y userId trong localStorage');
    }
  }
  applyCoupon() {
    if (!this.couponCode.trim() || !this.selectedCoupon) {
      this.message = '‚ö†Ô∏è Vui l√≤ng ch·ªçn ho·∫∑c nh·∫≠p m√£ gi·∫£m gi√°!';
      return;
    }
    // @ts-ignore
    if (this.orderTotal < this.selectedCoupon.minOrderValue) {
      // @ts-ignore
      this.message = `‚ö†Ô∏è ƒê∆°n h√†ng ph·∫£i t·ªëi thi·ªÉu ${this.selectedCoupon.minOrderValue.toLocaleString()} VND ƒë·ªÉ √°p d·ª•ng m√£ gi·∫£m gi√°!`;
      return;
    }

    // ‚úÖ Chu·∫©n b·ªã d·ªØ li·ªáu DTO ƒë·∫ßy ƒë·ªß ƒë·ªÉ g·ª≠i sang trang checkout
    const checkoutData = {
      coupon: this.coupons, // G·ª≠i DTO ƒë·∫ßy ƒë·ªß
      orderTotal: this.cartData?.totalPrice, // T·ªïng ti·ªÅn h√†ng
      userId: this.userId // ID ng∆∞·ªùi d√πng
    };
    // ‚úÖ Chuy·ªÉn sang trang thanh to√°n, truy·ªÅn to√†n b·ªô DTO qua state
    this.message = 'üéâ M√£ gi·∫£m gi√° h·ª£p l·ªá! ƒêang √°p d·ª•ng...';
    setTimeout(() => {
      this.router.navigate(['../cart'], { relativeTo: this.activatedRoute });
    }, 500);
  }

  selectCoupon(id: number) {
    // T√¨m m√£ gi·∫£m gi√° theo ID t·ª´ danh s√°ch
    const selected = this.coupons?.find(coupon => coupon.id === id) || null;

    if (selected) {
      // @ts-ignore
      this.selectedCoupon = selected; // G√°n m√£ gi·∫£m gi√° ƒë√£ ch·ªçn
      this.couponCode = selected.code; // C·∫≠p nh·∫≠t m√£ gi·∫£m gi√° hi·ªÉn th·ªã tr√™n UI
      console.log('‚úÖ Selected Coupon:', this.selectedCoupon);
      this.couponService.setCouponDTO(selected);
    } else {
      this.selectedCoupon = null;
      console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y m√£ gi·∫£m gi√°!');
    }
  }




}
