package com.example.DATN_Fashion_Shop_BE.controller;

import com.example.DATN_Fashion_Shop_BE.component.LocalizationUtils;
import com.example.DATN_Fashion_Shop_BE.dto.response.order.CreateOrderResponse;
import com.example.DATN_Fashion_Shop_BE.dto.response.orderDetail.OrderDetailResponse;
import com.example.DATN_Fashion_Shop_BE.dto.response.userAddressResponse.UserAddressResponse;
import com.example.DATN_Fashion_Shop_BE.model.Order;
import com.example.DATN_Fashion_Shop_BE.model.OrderDetail;
import com.example.DATN_Fashion_Shop_BE.model.Payment;
import com.example.DATN_Fashion_Shop_BE.model.User;
import com.example.DATN_Fashion_Shop_BE.repository.*;
import com.example.DATN_Fashion_Shop_BE.service.*;
import lombok.AllArgsConstructor;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/v1/momo")
@AllArgsConstructor
public class MomoController {
    private static final Logger log = LoggerFactory.getLogger(MomoController.class);
    private final MomoService momoService;
    private final OrderRepository orderRepository;
    private final OrderDetailRepository orderDetailRepository;
    private final PaymentRepository paymentRepository;
    private final PaymentMethodRepository paymentMethodRepository;
    private final OrderStatusRepository orderStatusRepository;
    private final EmailService emailService;
    /**
     * T·∫°o y√™u c·∫ßu thanh to√°n MoMo
     * @param amount S·ªë ti·ªÅn thanh to√°n
     * @param orderInfo Th√¥ng tin ƒë∆°n h√†ng
     * @param orderId M√£ ƒë∆°n h√†ng
     * @return D·ªØ li·ªáu y√™u c·∫ßu thanh to√°n
     */
    @PostMapping("/create")
    public ResponseEntity<?> createPayment(
            @RequestParam long amount,
            @RequestParam String orderInfo,
            @RequestParam String orderId) {

        try {
            log.info("T·∫°o y√™u c·∫ßu thanh to√°n MoMo - Amount: {}, OrderInfo: {}, OrderId: {}",
                    amount, orderInfo, orderId);

            Map<String, Object> paymentData = momoService.createPayment(amount, orderInfo, orderId);
            return ResponseEntity.ok(paymentData);

        } catch (Exception e) {
            log.error("L·ªói khi t·∫°o thanh to√°n MoMo", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of(
                            "status", "error",
                            "message", "L·ªói khi t·∫°o thanh to√°n MoMo: " + e.getMessage()
                    ));
        }
    }

    /**
     * Endpoint nh·∫≠n callback t·ª´ MoMo
     * @param callbackData D·ªØ li·ªáu callback t·ª´ MoMo
     * @return K·∫øt qu·∫£ x·ª≠ l√Ω callback
     */
    @PostMapping("/callback")
    public ResponseEntity<?> momoCallback(@RequestBody Map<String, Object> callbackData) {
        try {
            log.info("üîÑ Nh·∫≠n callback t·ª´ MoMo l·∫ßn th·ª©: {}", System.currentTimeMillis());

            // X√°c minh ch·ªØ k√Ω t·ª´ MoMo
            if (!momoService.verifyCallback(callbackData)) {
                log.warn("‚ùå Callback kh√¥ng h·ª£p l·ªá t·ª´ MoMo");
                return ResponseEntity.badRequest().body("Invalid signature");
            }

            String resultCode = callbackData.get("resultCode").toString();
            String momoOrderId  = callbackData.get("orderId").toString();
            String transactionId = callbackData.get("transId").toString();
            double amount = Double.parseDouble(callbackData.get("amount").toString());

            log.info("üìå orderId nh·∫≠n ƒë∆∞·ª£c t·ª´ MoMo: {}", momoOrderId);

            String[] orderIdParts = momoOrderId .split("_");
            long orderId = Long.parseLong(orderIdParts[0]);

            // T√¨m ƒë∆°n h√†ng
            Order order = orderRepository.findOrderWithUserAndAddresses(orderId)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£ giao d·ªãch: " + orderId));

            if ("0".equals(resultCode)) {

                order.setOrderStatus(orderStatusRepository.findByStatusName("PROCESSING")
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i PROCESSING.")));

                order.setTransactionId(transactionId);
                orderRepository.save(order);


//                log.info("‚úÖ Giao d·ªãch th√†nh c√¥ng. ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ID: {}", order.getId());
//             boolean paymentExists = paymentRepository.existsByOrderId(orderId);
//                if (paymentExists) {
//                    log.warn("‚ö† Thanh to√°n ƒë√£ t·ªìn t·∫°i cho ƒë∆°n h√†ng ID: {}. Kh√¥ng l∆∞u tr√πng l·∫∑p.", orderId);
//                } else {
                if(!paymentRepository.existsByOrderId(orderId)) {
                    // L∆∞u th√¥ng tin thanh to√°n
                    Payment payment = Payment.builder()
                            .order(order)
                            .paymentMethod(paymentMethodRepository.findByMethodName("MOMO")
                                    .orElseThrow(() -> new RuntimeException("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá.")))
                            .paymentDate(new Date())
                            .amount(amount)
                            .status("PAID")
                            .transactionCode(transactionId)
                            .build();

                    paymentRepository.save(payment);
                    log.info("‚úÖ ƒê√£ l∆∞u th√¥ng tin thanh to√°n cho ƒë∆°n h√†ng ID: {}", orderId);


                }
                order = orderRepository.findOrderWithUserAndAddresses(orderId)
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng sau khi l∆∞u payment: " + orderId));

                List<UserAddressResponse> userAddressResponses = (order.getUser().getUserAddresses() != null)
                        ? order.getUser().getUserAddresses().stream()
                        .map(UserAddressResponse::fromUserAddress)
                        .collect(Collectors.toList())
                        : new ArrayList<>();


                User user = order.getUser();
                if (order.getUser().getEmail() != null && !order.getUser().getEmail().isEmpty()) {

                    List<OrderDetail> orderDetails = orderDetailRepository.findByOrderId(order.getId());

                    List<OrderDetailResponse> orderDetailResponses = orderDetails.stream()
                            .map(orderDetail -> OrderDetailResponse.fromOrderDetail(orderDetail, userAddressResponses, paymentRepository))
                            .collect(Collectors.toList());

                    emailService.sendOrderConfirmationEmail(user.getEmail(), orderDetailResponses);
                    log.info("üìß ƒê√£ g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng (MoMo) ƒë·∫øn {}", user.getEmail());
                } else {
                    log.warn("‚ö† Kh√¥ng th·ªÉ g·ª≠i email v√¨ email c·ªßa ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");
                }

            } else {
                log.info("‚ùå Giao d·ªãch th·∫•t b·∫°i v·ªõi resultCode: {}", resultCode);
                order.setOrderStatus(orderStatusRepository.findByStatusName("CANCELLED")
                        .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i CANCELLED.")));
                orderRepository.save(order);
                log.info("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng ID: {} th√†nh CANCELLED", order.getId());
            }

            return ResponseEntity.ok(CreateOrderResponse.fromOrder(order));

        } catch (Exception e) {
            log.error("‚ùå L·ªói khi x·ª≠ l√Ω callback t·ª´ MoMo: {}", e.getMessage(), e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(Map.of(
                    "error", "L·ªói khi x·ª≠ l√Ω callback t·ª´ MoMo",
                    "message", e.getMessage()
            ));
        }
    }

    /**
     * Truy v·∫•n tr·∫°ng th√°i thanh to√°n
     * @param orderId M√£ ƒë∆°n h√†ng
     * @param requestId M√£ y√™u c·∫ßu
     * @return Tr·∫°ng th√°i thanh to√°n
     */
    @GetMapping("/query-status")
    public ResponseEntity<?> queryPaymentStatus(
            @RequestParam String orderId,
            @RequestParam String requestId) {

        try {
            log.info("Truy v·∫•n tr·∫°ng th√°i thanh to√°n - OrderId: {}, RequestId: {}",
                    orderId, requestId);

            Map<String, Object> queryResult = momoService.queryPaymentStatus(orderId, requestId);
            return ResponseEntity.ok(queryResult);

        } catch (Exception e) {
            log.error("L·ªói khi truy v·∫•n tr·∫°ng th√°i thanh to√°n MoMo", e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of(
                            "status", "error",
                            "message", "L·ªói khi truy v·∫•n tr·∫°ng th√°i thanh to√°n: " + e.getMessage()
                    ));
        }
    }

    /**
     * Ki·ªÉm tra k·∫øt n·ªëi MoMo
     * @return K·∫øt qu·∫£ ki·ªÉm tra
     */
    @GetMapping("/test-connection")
    public ResponseEntity<?> testConnection() {
        try {
            // T·∫°o m·ªôt y√™u c·∫ßu test ƒë∆°n gi·∫£n
            String requestId = momoService.generateRequestId();
            Map<String, Object> testQuery = momoService.queryPaymentStatus("TEST_ORDER", requestId);

            return ResponseEntity.ok(Map.of(
                    "status", "success",
                    "message", "K·∫øt n·ªëi MoMo th√†nh c√¥ng",
                    "testData", testQuery
            ));

        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(Map.of(
                            "status", "error",
                            "message", "L·ªói k·∫øt n·ªëi MoMo: " + e.getMessage()
                    ));
        }
    }

}
