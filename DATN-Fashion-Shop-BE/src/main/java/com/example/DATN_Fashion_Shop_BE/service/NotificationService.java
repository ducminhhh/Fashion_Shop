package com.example.DATN_Fashion_Shop_BE.service;

import com.example.DATN_Fashion_Shop_BE.dto.request.Notification.NotificationTranslationRequest;
import com.example.DATN_Fashion_Shop_BE.dto.response.notification.NotificationResponse;
import com.example.DATN_Fashion_Shop_BE.dto.response.notification.TotalNotificationResponse;
import com.example.DATN_Fashion_Shop_BE.model.*;
import com.example.DATN_Fashion_Shop_BE.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.function.Function;
import java.util.stream.Collectors;

import static com.example.DATN_Fashion_Shop_BE.model.TransferStatus.*;

@RequiredArgsConstructor
@Service
public class NotificationService {
    private final NotificationRepository notificationRepository;
    private final NotificationTranslationRepository notificationTranslationRepository;
    private final LanguageRepository languageRepository;
    private final UserRepository userRepository;
    private final ProductRepository productRepository;

    public Page<NotificationResponse> getUserNotifications(Long userId, String langCode, Pageable pageable) {
        Page<Notification> notifications = notificationRepository.findAllByUserId(pageable,userId);
        return notifications.map(
                notification -> NotificationResponse.fromNotification(notification,langCode)
        );
    }

    public TotalNotificationResponse  getNotificationCount(Long userId) {
        Integer count = notificationRepository.countByUserIdAndIsRead(userId, false);
        return new TotalNotificationResponse(count);
    }

    public void markAllNotificationsAsRead(Long userId) {
        notificationRepository.markAllAsReadByUserId(userId);
    }

    @Transactional
    public void createNotification(Long userId, String type, String redirectUrl, String imageUrl, List<NotificationTranslationRequest> translations) {
        User user = (userId != null) ? userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("User not found")) : null;

        Notification notification = Notification.builder()
                .user(user)
                .type(type)
                .isRead(false)
                .redirectUrl(redirectUrl)
                .imageUrl(imageUrl)
                .build();

        notification = notificationRepository.save(notification);

        Notification finalNotification = notification;
        List<NotificationTranslations> translationEntities = translations.stream()
                .map(t -> createTranslation(finalNotification, t.getLangCode(), t.getTitle(), t.getMessage()))
                .collect(Collectors.toList());

        notificationTranslationRepository.saveAll(translationEntities);
    }

    private NotificationTranslations createTranslation(Notification notification, String langCode, String title, String message) {
        Language language = languageRepository.findByCode(langCode)
                .orElseThrow(() -> new RuntimeException("Language not found: " + langCode));

        return NotificationTranslations.builder()
                .notification(notification)
                .language(language)
                .title(title)
                .message(message)
                .build();
    }


    /**
     * Th√¥ng b√°o tr·∫°ng th√°i Order b·∫±ng ti·∫øng Vi·ªát
     */
    public String getVietnameseMessage(Long orderId, OrderStatus status) {
        return switch (status.getStatusName()) {
            case "PENDING" -> "ƒê∆°n h√†ng #" + orderId + " ƒëang ch·ªù x√°c nh·∫≠n.";
            case "PROCESSING" -> "ƒê∆°n h√†ng #" + orderId + " ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.";
            case "SHIPPED" -> "ƒê∆°n h√†ng #" + orderId + " ƒëang ƒë∆∞·ª£c giao.";
            case "DELIVERED" -> "ƒê∆°n h√†ng #" + orderId + " ƒë√£ giao th√†nh c√¥ng.";
            case "CANCELLED" -> "ƒê∆°n h√†ng #" + orderId + " ƒë√£ b·ªã h·ªßy.";
            case "DONE" -> "ƒê∆°n h√†ng #" + orderId + " ƒë√£ ho√†n th√†nh.";
            default -> "Tr·∫°ng th√°i ƒë∆°n h√†ng kh√¥ng x√°c ƒë·ªãnh.";
        };
    }

    public String getEnglishMessage(Long orderId, OrderStatus status) {
        return switch (status.getStatusName()) {
            case "PENDING" -> "Order #" + orderId + " is pending confirmation.";
            case "PROCESSING" -> "Order #" + orderId + " is being processed.";
            case "SHIPPED" -> "Order #" + orderId + " is being shipped.";
            case "DELIVERED" -> "Order #" + orderId + " has been delivered successfully.";
            case "CANCELLED" -> "Order #" + orderId + " has been canceled.";
            case "DONE" -> "Order #" + orderId + " has been completed.";
            default -> "Unknown order status.";
        };
    }

    public String getJapaneseMessage(Long orderId, OrderStatus status) {
        return switch (status.getStatusName()) {
            case "PENDING" -> "Ê≥®Êñá #" + orderId + " „ÅØÁ¢∫Ë™çÂæÖ„Å°„Åß„Åô„ÄÇ";
            case "PROCESSING" -> "Ê≥®Êñá #" + orderId + " „ÅØÂá¶ÁêÜ‰∏≠„Åß„Åô„ÄÇ";
            case "SHIPPED" -> "Ê≥®Êñá #" + orderId + " „ÅØÁô∫ÈÄÅ„Åï„Çå„Åæ„Åó„Åü„ÄÇ";
            case "DELIVERED" -> "Ê≥®Êñá #" + orderId + " „ÅåÊ≠£Â∏∏„Å´ÈÖçÈÅî„Åï„Çå„Åæ„Åó„Åü„ÄÇ";
            case "CANCELLED" -> "Ê≥®Êñá #" + orderId + " „ÅØ„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü„ÄÇ";
            case "DONE" -> "Ê≥®Êñá #" + orderId + " „ÅØÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇ";
            default -> "‰∏çÊòé„Å™Ê≥®Êñá„Çπ„ÉÜ„Éº„Çø„Çπ„Åß„Åô„ÄÇ";
        };
    }


    public List<NotificationTranslationRequest> createCouponTranslations(Coupon coupon) {
        String discountDetails = getDiscountDetails(coupon);

        return List.of(
                new NotificationTranslationRequest("vi", "∆Øu ƒë√£i ƒë·∫∑c bi·ªát!",
                        "B·∫°n c√≥ m·ªôt m√£ gi·∫£m gi√° v·ªõi gi√° tr·ªã l√† ##" + discountDetails + "##" +
                                " cho ƒë∆°n h√†ng c√≥ gi√° tr·ªã t·ª´ ##" + coupon.getMinOrderValue() + "## tr·ªü l√™n." +
                                " H·∫°n s·ª≠ d·ª•ng: " + formatDate(coupon.getExpirationDate(), "vi") + "."
                ),
                new NotificationTranslationRequest("en", "Special Offer!",
                        "You have a discount code worth ##" + discountDetails + "##" +
                                " for orders from ##" + coupon.getMinOrderValue() + "## or more." +
                                " Expiry date: " + formatDate(coupon.getExpirationDate(), "en") + "."
                ),
                new NotificationTranslationRequest("jp", "ÁâπÂà•„Ç™„Éï„Ç°„ÉºÔºÅ",
                        "„ÅÇ„Å™„Åü„Å´„ÅØ ##" + discountDetails + "## „ÅÆÂâ≤Âºï„Ç≥„Éº„Éâ„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ" +
                                " ÊúÄ‰ΩéÊ≥®ÊñáÈ°ç: ##" + coupon.getMinOrderValue() + "##„ÄÇ" +
                                " ÊúâÂäπÊúüÈôê: " + formatDate(coupon.getExpirationDate(), "jp") + "„ÄÇ"
                )
        );
    }

    public String getDiscountDetails(Coupon coupon) {
        if ("PERCENT".equalsIgnoreCase(coupon.getDiscountType())) {
            return coupon.getDiscountValue() + "%";
        } else if ("FIXED".equalsIgnoreCase(coupon.getDiscountType())) {
            return String.valueOf(coupon.getDiscountValue()); // Tr·∫£ v·ªÅ s·ªë ti·ªÅn g·ªëc, frontend s·∫Ω x·ª≠ l√Ω format ti·ªÅn t·ªá
        }
        return "";
    }

    public String formatDate(LocalDateTime date, String langCode) {
        DateTimeFormatter formatter;
        switch (langCode) {
            case "vi": formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"); break;
            case "en": formatter = DateTimeFormatter.ofPattern("MM-dd-yyyy HH:mm"); break;
            case "jp": formatter = DateTimeFormatter.ofPattern("yyyyÂπ¥MMÊúàddÊó• HH:mm"); break;
            default: formatter = DateTimeFormatter.ISO_DATE_TIME;
        }
        return date.format(formatter);
    }

    public List<NotificationTranslationRequest> createPromotionTranslations(Promotion promotion) {
        return List.of(
                new NotificationTranslationRequest("vi", "Khuy·∫øn m√£i h·∫•p d·∫´n!",
                        "Gi·∫£m ngay **##" + promotion.getDiscountPercentage() + "%##** cho c√°c s·∫£n ph·∫©m trong ch∆∞∆°ng tr√¨nh!" +
                                " Ch∆∞∆°ng tr√¨nh di·ªÖn ra t·ª´ **" + formatDate(promotion.getStartDate(), "vi") + "** ƒë·∫øn **" + formatDate(promotion.getEndDate(), "vi") + "**." +
                                " ƒê·ª´ng b·ªè l·ª°!"
                ),
                new NotificationTranslationRequest("en", "Exciting Promotion!",
                        "Get **##" + promotion.getDiscountPercentage() + "%##** off on selected products!" +
                                " The promotion runs from **" + formatDate(promotion.getStartDate(), "en") + "** to **" + formatDate(promotion.getEndDate(), "en") + "**." +
                                " Don't miss out!"
                ),
                new NotificationTranslationRequest("jp", "„ÅäÂæó„Å™„Éó„É≠„É¢„Éº„Ç∑„Éß„É≥ÔºÅ",
                        "ÈÅ∏„Å∞„Çå„ÅüÂïÜÂìÅ„ÅÆÂâ≤Âºï **##" + promotion.getDiscountPercentage() + "%##**ÔºÅ" +
                                " „Éó„É≠„É¢„Éº„Ç∑„Éß„É≥ÊúüÈñì: **" + formatDate(promotion.getStartDate(), "jp") + "** „Åã„Çâ **" + formatDate(promotion.getEndDate(), "jp") + "** „Åæ„Åß„ÄÇ" +
                                " „ÅäË¶ãÈÄÉ„Åó„Å™„ÅèÔºÅ"
                )
        );
    }

    @Transactional
    //@Scheduled(cron = "0 * * * * ?")
    @Scheduled(cron = "0 0 0 1 */2 ?")
    public void scheduledDeleteAllNotifications() {
        notificationRepository.deleteAll();
        System.out.println("üîÑ T·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c x√≥a t·ª± ƒë·ªông v√†o ng√†y 1 c·ªßa m·ªói 2 th√°ng!");
    }

    @Transactional
    public void deleteById(Long notificationId) {
        if (!notificationRepository.existsById(notificationId)) {
            throw new RuntimeException("Notification with ID " + notificationId + " not found");
        }
        notificationRepository.deleteById(notificationId);
    }

    @Transactional
    public void deleteByUserId(Long userId) {
        notificationRepository.deleteByUserId(userId);
    }

    public List<NotificationTranslationRequest> createPromotionForStaff(Promotion promotion) {
        // L·∫•y danh s√°ch s·∫£n ph·∫©m thu·ªôc promotion
        List<Product> products = productRepository.findByPromotion(promotion);

        // H√†m l·∫•y danh s√°ch s·∫£n ph·∫©m theo ng√¥n ng·ªØ
        Function<String, String> getProductNamesByLang = (langCode) -> products.stream()
                .map(product -> {
                    ProductsTranslation translation = product.getTranslationByLanguage(langCode);
                    return  translation.getName();
                })
                .filter(Objects::nonNull) // L·ªçc ra c√°c s·∫£n ph·∫©m c√≥ t√™n h·ª£p l·ªá
                .collect(Collectors.joining(", "));

        return List.of(
                new NotificationTranslationRequest("vi", "S·∫£n ph·∫©m s·∫Øp gi·∫£m gi√°!",
                        "C√°c m·∫∑t h√†ng sau ƒë√¢y s·∫Ω ƒë∆∞·ª£c gi·∫£m **##" + promotion.getDiscountPercentage() + "%##** t·ª´ **"
                                + formatDate(promotion.getStartDate(), "vi") + "** ƒë·∫øn **" + formatDate(promotion.getEndDate(), "vi")
                                + "**: " + getProductNamesByLang.apply("vi") + ". ƒê·ª´ng b·ªè l·ª°!"),

                new NotificationTranslationRequest("en", "Upcoming Discount on Products!",
                        "The following products will have a **##" + promotion.getDiscountPercentage() + "%##** discount from **"
                                + formatDate(promotion.getStartDate(), "en") + "** to **" + formatDate(promotion.getEndDate(), "en")
                                + "**: " + getProductNamesByLang.apply("en") + ". Don't miss out!"),

                new NotificationTranslationRequest("jp", "„Åæ„ÇÇ„Å™„ÅèÂâ≤ÂºïÈñãÂßãÔºÅ",
                        "Ê¨°„ÅÆÂïÜÂìÅ„ÅÆÂâ≤Âºï„ÅåÈñãÂßã„Åï„Çå„Åæ„ÅôÔºÅ **##" + promotion.getDiscountPercentage() + "%##** „ÅÆÂâ≤ÂºïÊúüÈñì: **"
                                + formatDate(promotion.getStartDate(), "jp") + "** „Åã„Çâ **" + formatDate(promotion.getEndDate(), "jp")
                                + "** „Åæ„Åß„ÄÇÂØæË±°ÂïÜÂìÅ: " + getProductNamesByLang.apply("jp") + "„ÄÇ „ÅäË¶ãÈÄÉ„Åó„Å™„ÅèÔºÅ")
        );
    }

}
