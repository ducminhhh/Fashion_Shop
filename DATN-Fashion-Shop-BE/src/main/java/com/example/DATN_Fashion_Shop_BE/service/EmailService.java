package com.example.DATN_Fashion_Shop_BE.service;

import com.example.DATN_Fashion_Shop_BE.dto.response.order.OrderResponseMail;
import com.example.DATN_Fashion_Shop_BE.dto.response.orderDetail.OrderDetailResponse;
import com.example.DATN_Fashion_Shop_BE.dto.response.product.ProductVariantResponse;
import com.example.DATN_Fashion_Shop_BE.model.HolidayCouponTranslation;
import com.example.DATN_Fashion_Shop_BE.dto.response.store.StoreOrderDetailResponse;
import com.example.DATN_Fashion_Shop_BE.dto.response.store.StoreOrderResponse;
import com.example.DATN_Fashion_Shop_BE.model.OrderDetail;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.nio.file.Paths;
import java.text.NumberFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Locale;
import java.util.UUID;
import java.util.Optional;

@Service
@RequiredArgsConstructor
public class EmailService {
    private final JavaMailSender mailSender;
    private final QRCodeService qrCodeService;
    static final Logger log = LoggerFactory.getLogger(EmailService.class);
    private final HolidayCouponTranslationService holidayCouponTranslationService;
    public void sendEmail(String to, String subject, String text) throws MessagingException {
        MimeMessage message = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

        helper.setTo(to);
        helper.setSubject(subject);
        helper.setText(text, true); // `true` ƒë·ªÉ g·ª≠i email ·ªü ƒë·ªãnh d·∫°ng HTML

        mailSender.send(message);
    }
    public void sendVerificationEmail(String to, String firstName, String verificationUrl) throws MessagingException {
        String subject = "üîê Email Verification";
        String message = "<html><head>"
                + "<style>"
                + "body { font-family: Arial, sans-serif; background-color: #f4f4f4; margin: 0; padding: 0; }"
                + ".email-container { max-width: 600px; background: #ffffff; margin: 20px auto; padding: 20px; "
                + "border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }"
                + ".email-header { text-align: center; font-size: 20px; font-weight: bold; color: #333; margin-bottom: 20px; }"
                + ".email-body { font-size: 16px; color: #555; line-height: 1.5; }"
                + ".button-container { text-align: center; margin-top: 20px; }"
                + ".verify-button { display: inline-block; padding: 12px 24px; font-size: 18px; color: #fff; "
                + "background-color: #28a745; border-radius: 5px; text-decoration: none; font-weight: bold; }"
                + ".email-footer { margin-top: 30px; font-size: 14px; text-align: center; color: #777; }"
                + "</style></head><body>"

                + "<div class='email-container'>"
                + "<div class='email-header'>üîê Email Verification</div>"
                + "<div class='email-body'>"
                + "<p>Dear <b>" + firstName + "</b>,</p>"
                + "<p>Welcome to our service! To keep your account secure, please verify your email "
                + "by clicking the button below:</p>"

                + "<div class='button-container'>"
                + "<a href='" + verificationUrl + "' class='verify-button'>Verify Email</a>"
                + "</div>"

                + "<p style='text-align: center; margin-top: 15px; font-size: 14px; color: #777;'>"
                + "If you did not request this, please ignore this email.</p>"

                + "</div>"
                + "<div class='email-footer'>"
                + "Best regards,<br/><b>Support Team</b><br/>"
                + "üìß Contact us: support@example.com"
                + "</div>"
                + "</div>"

                + "</body></html>";


        sendEmail(to, subject, message);
    }


    public void sendEmailWithAttachment(String to, String subject, String body, String qrCodePath) throws MessagingException {
        MimeMessage message = mailSender.createMimeMessage();

        MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

        helper.setTo(to);
        helper.setSubject(subject);
        helper.setText(body, true);

        // Th√™m m√£ QR d∆∞·ªõi d·∫°ng inline attachment (·∫£nh nh√∫ng)
        File qrCodeFile = new File(qrCodePath);
        if (qrCodeFile.exists()) {
            helper.addInline("qrCode", qrCodeFile);
        } else {
            throw new RuntimeException("QR Code file not found: " + qrCodePath);
        }

        mailSender.send(message);
    }

    public void sendCouponEmail(String to, String couponCode, int daysValid, String couponType, String languageCode) {
        try {
            // L·∫•y b·∫£n d·ªãch t·ª´ HolidayCouponTranslation
            Optional<HolidayCouponTranslation> translationOpt = holidayCouponTranslationService.getTranslation(couponType, languageCode);

            String title = "üéâ Ch√∫c m·ª´ng! B·∫°n v·ª´a nh·∫≠n ƒë∆∞·ª£c m√£ gi·∫£m gi√° üéä";
            String description = "H√£y t·∫≠n h∆∞·ªüng ∆∞u ƒë√£i t·ª´ ch√∫ng t√¥i!";
            String imageUrl = "default-image.jpg"; // ·∫¢nh m·∫∑c ƒë·ªãnh

            if (translationOpt.isPresent()) {
                HolidayCouponTranslation translation = translationOpt.get();
                title = translation.getName();
                description = translation.getDescription();
                imageUrl = "http://localhost:8080/uploads/images/coupons/" + couponType + ".jpg"; // ·∫¢nh c√≥ th·ªÉ l∆∞u theo couponType
            }

            // X√¢y d·ª±ng n·ªôi dung email
            String emailContent = buildEmailContent(couponCode, imageUrl, daysValid, title, description);

            // G·ª≠i email
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");
            helper.setTo(to);
            helper.setSubject("üéÅ " + title + " - Nh·∫≠n ngay m√£ gi·∫£m gi√° t·ª´ Fashion Shop!");
            helper.setText(emailContent, true);

            mailSender.send(message);
        } catch (MessagingException e) {
            throw new RuntimeException("L·ªói khi g·ª≠i email", e);
        }
    }


    private String buildEmailContent(String couponCode, String imageUrl, int daysValid, String title, String description) {
        return "<div style='text-align:center;'>"
                + "<h1>üéâ " + title + " üéä</h1>"
                + "<p>" + description + "</p>"
                + "<p><img src='" + imageUrl + "' alt='Coupon Image' style='width:100%; max-width:400px; border-radius:10px;'/></p>"
                + "<p><b>M√£ gi·∫£m gi√° c·ªßa b·∫°n:</b> <span style='color:red;font-size:22px;'>" + couponCode + "</span></p>"
                + "<p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong <b>" + daysValid + " ng√†y</b>. H√£y s·ª≠ d·ª•ng ngay!</p>"
                + "<p><i>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© Fashion Shop</i></p>"
                + "</div>";
    }


    @Async
    public void sendOrderConfirmationEmail(String to, List<OrderDetailResponse> orderDetails) {
        if (orderDetails == null || orderDetails.isEmpty()) {
            log.warn("‚ö† Kh√¥ng c√≥ chi ti·∫øt ƒë∆°n h√†ng ƒë·ªÉ g·ª≠i email.");
            return;
        }

        try {
            // Log th√¥ng tin payment method t·ª´ t·∫•t c·∫£ order details
            log.info("===== TH√îNG TIN PH∆Ø∆†NG TH·ª®C THANH TO√ÅN =====");
            for (OrderDetailResponse detail : orderDetails) {
                log.info("Order ID: {} - Payment Method: {}", detail.getOrderId(), detail.getPaymentMethod());
            }
            log.info("=======================================");

            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            OrderDetailResponse firstDetail = orderDetails.get(0); // L·∫•y th√¥ng tin chung t·ª´ ƒë∆°n h√†ng ƒë·∫ßu ti√™n


            String subject = "X√°c nh·∫≠n ƒë∆°n h√†ng #" + firstDetail.getOrderId();
            String orderDetailsHtml = buildOrderDetailsHtml(orderDetails);

            // X√¢y d·ª±ng n·ªôi dung email
            StringBuilder body = new StringBuilder();
            body.append("<html><body>");
            body.append("<p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i!</p>");
            body.append("<p><strong>M√£ ƒë∆°n h√†ng:</strong> ").append(firstDetail.getOrderId()).append("</p>");
            body.append("<p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> ").append(firstDetail.getRecipientName()).append("</p>");
            body.append("<p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ").append(firstDetail.getRecipientPhone()).append("</p>");
            body.append("<p><strong>ƒê·ªãa ch·ªâ giao h√†ng:</strong> ").append(firstDetail.getShippingAddress()).append("</p>");
            body.append("<p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ").append(firstDetail.getPaymentMethod()).append("</p>");
            body.append("<p><strong>Thu·∫ø:</strong> ").append(firstDetail.getTax()).append(" VNƒê</p>");
            body.append("<p><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> ").append(firstDetail.getShippingFee()).append(" VNƒê</p>");
            body.append("<p><strong>T·ªïng ti·ªÅn:</strong> ").append(firstDetail.getGrandTotal()).append(" VNƒê</p>");
            body.append("<h3>Chi ti·∫øt ƒë∆°n h√†ng:</h3>");
            body.append(orderDetailsHtml);
            body.append("<p>üíñ Ch√∫c b·∫°n c√≥ m·ªôt ng√†y tuy·ªát v·ªùi!</p>");
            body.append("<p>Tr√¢n tr·ªçng,</p>");
            body.append("<p><strong>ƒê·ªôi ng≈© c·ª≠a h√†ng BrandShop lu√¥n t·∫≠n t√¨nh ph·ª•c v·ª• qu√Ω kh√°ch</strong></p>");
            body.append("</body></html>");

            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(body.toString(), true);

            // G·∫Øn h√¨nh ·∫£nh v√†o email
            for (OrderDetailResponse detail : orderDetails) {
                log.info("üìå Order ID: {}", detail.getOrderId());
                log.info("üìå Recipient Name: {}", detail.getRecipientName());
                log.info("üìå Recipient Phone: {}", detail.getRecipientPhone());
                if (detail.getImageUrl() != null) {
                    File imageFile = new File(Paths.get("uploads/images/products/", detail.getImageUrl()).toString());
                    log.info("üìå ƒê∆∞·ªùng d·∫´n ·∫£nh: {}", imageFile.getAbsolutePath());


                    if (imageFile.exists()) {
                        FileSystemResource image = new FileSystemResource(imageFile);
                        String contentId = "image" + detail.getOrderDetailId();
                        helper.addInline(contentId, image);
                    } else {
                        log.warn("‚ö† H√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i: {}", imageFile.getAbsolutePath());
                    }

                }
            }


            mailSender.send(message);
            log.info("üìß ƒê√£ g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng ƒë·∫øn {}", to);
        } catch (MessagingException e) {
            log.error("‚ùå L·ªói khi g·ª≠i email: {}", e.getMessage());
            e.printStackTrace();
        }
    }




    private String buildOrderDetailsHtml(List<OrderDetailResponse> orderDetails) {
        StringBuilder html = new StringBuilder();
        html.append("<table border='1' cellspacing='0' cellpadding='5' style='border-collapse: collapse; width: 100%;'>");
        html.append("<tr style='background-color: #f2f2f2; text-align: left;'>");
        html.append("<th>H√¨nh ·∫£nh</th><th>S·∫£n ph·∫©m</th><th>S·ªë l∆∞·ª£ng</th><th>M√†u</th><th>Size</th><th>Gi√°</th></tr>");

        for (OrderDetailResponse detail : orderDetails) {
            ProductVariantResponse product = detail.getProductVariant();
            String contentId = "image" + detail.getOrderDetailId();
            html.append("<tr>")
                    .append("<td><img src='cid:").append(contentId).append("' width='100' height='100' style='border-radius: 4px;'/></td>")
                    .append("<td>").append(product.getProductName()).append("</td>")
                    .append("<td>").append(detail.getQuantity()).append("</td>")
                    .append("<td>").append(product.getColorName()).append("</td>")
                    .append("<td>").append(product.getSize()).append("</td>")
                    .append("<td>").append(detail.getTotalPrice()).append("</td>")
                    .append("</tr>");
        }

        html.append("</table>");
        return html.toString();
    }

    private String buildOrderDetailsHtml2(List<StoreOrderDetailResponse> orderDetails) {
        StringBuilder html = new StringBuilder();
        html.append("<table border='1' cellspacing='0' cellpadding='5' style='border-collapse: collapse; width: 100%;'>");
        html.append("<tr style='background-color: #f2f2f2; text-align: left;'>");
        html.append("<th>H√¨nh ·∫£nh</th><th>S·∫£n ph·∫©m</th><th>S·ªë l∆∞·ª£ng</th><th>Gi√°</th>" +
                "<th>M√†u</th><th>Size</th><th>T·ªïng C·ªông</th></tr>");

        for (int i = 0; i < orderDetails.size(); i++) {
            StoreOrderDetailResponse detail = orderDetails.get(i);
            String contentId = "image" + i; // ƒê·∫∑t contentId theo ch·ªâ m·ª•c ƒë·ªÉ tr√°nh tr√πng l·∫∑p

            html.append("<tr>")
                    .append("<td><img src='cid:").append(contentId).append("' width='100' height='100' style='border-radius: 4px;'/></td>")
                    .append("<td>").append(detail.getProductName()).append("</td>")
                    .append("<td>").append(detail.getQuantity()).append("</td>")
                    .append("<td>").append(formatCurrency(detail.getUnitPrice())).append("</td>")
                    .append("<td>").append(detail.getColorName()).append("</td>")
                    .append("<td>").append(detail.getSizeName()).append("</td>")
                    .append("<td>").append(formatCurrency(detail.getTotalPrice())).append("</td>")
                    .append("</tr>");
        }

        html.append("</table>");
        return html.toString();
    }

    @Async
    public void sendOrderConfirmationEmail(String to, StoreOrderResponse storeOrder) {
        if (storeOrder == null || storeOrder.getOrderDetails().isEmpty()) {
            log.warn("‚ö† Kh√¥ng c√≥ chi ti·∫øt ƒë∆°n h√†ng ƒë·ªÉ g·ª≠i email.");
            return;
        }

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            String subject = "ƒê∆°n h√†ng Click&Collect ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng ";
            String orderDetailsHtml = buildOrderDetailsHtml2(storeOrder.getOrderDetails());

            // X√¢y d·ª±ng n·ªôi dung email
            StringBuilder body = new StringBuilder();
            body.append("<html><body>");
            body.append("<p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i!</p>");
            body.append("<p><strong style='color: red; font-weight: bold;'>Khi ƒë∆°n h√†ng s·∫µn s√†ng, ch√∫ng t√¥i s·∫Ω th√¥ng b√°o cho b·∫°n trong th·ªùi gian s·ªõm nh·∫•t!</strong></p>");
            body.append("<p><strong>M√£ ƒë∆°n h√†ng:</strong> ").append(storeOrder.getOrderId()).append("</p>");
            body.append("<p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> ").append(storeOrder.getUser().getFirstName())
                    .append(" ")
                    .append(storeOrder.getUser().getLastName()).append("</p>");
            body.append("<p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ").append(storeOrder.getUser().getPhone()).append("</p>");
            body.append("<p><strong>ƒê·ªãa ch·ªâ c·ª≠a h√†ng:</strong> ").append(storeOrder.getShippingAddress()).append("</p>");
            body.append("<p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ");
            if (storeOrder.getPaymentMethod().getMethodName().equals("Pay-in-store")) {
                body.append("Thanh to√°n t·∫°i c·ª≠a h√†ng");
            } else {
                body.append(storeOrder.getPaymentMethod().getMethodName());
            }
            body.append("</p>");
            body.append("<p><strong>Thu·∫ø:</strong> ").append(formatCurrency(storeOrder.getTaxAmount())).append("</p>");
            body.append("<p><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> ").append(formatCurrency(storeOrder.getShippingFee())).append("</p>");
            body.append("<p><strong>T·ªïng ti·ªÅn:</strong> ").append(formatCurrency(storeOrder.getTotalPrice())).append("</p>");
            body.append("<h3>Chi ti·∫øt ƒë∆°n h√†ng:</h3>");
            body.append(orderDetailsHtml);

            body.append("<p>Tr√¢n tr·ªçng,</p>");
            body.append("<p><strong>ƒê·ªôi ng≈© c·ª≠a h√†ng BrandShop lu√¥n t·∫≠n t√¨nh ph·ª•c v·ª• qu√Ω kh√°ch</strong></p>");
            body.append("</body></html>");

            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(body.toString(), true);

            // G·∫Øn h√¨nh ·∫£nh v√†o email
            int index = 0;
            for (StoreOrderDetailResponse detail : storeOrder.getOrderDetails()) {
                if (detail.getProductImage() != null) {
                    File imageFile = new File(Paths.get("uploads/images/products/", detail.getProductImage()).toString());
                    log.info("üìå ƒê∆∞·ªùng d·∫´n ·∫£nh: {}", imageFile.getAbsolutePath());

                    if (imageFile.exists()) {
                        FileSystemResource image = new FileSystemResource(imageFile);
                        String contentId = "image" + index++; // Ph·∫£i kh·ªõp v·ªõi `cid` trong HTML
                        helper.addInline(contentId, image);
                    } else {
                        log.warn("‚ö† H√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i: {}", imageFile.getAbsolutePath());
                    }
                }
            }

            mailSender.send(message);
            log.info("üìß ƒê√£ g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng ƒë·∫øn {}", to);
        } catch (MessagingException e) {
            log.error("‚ùå L·ªói khi g·ª≠i email: {}", e.getMessage(), e);
        }
    }

    @Async
    public void sendOrderReadyForPickupEmail(String to, StoreOrderResponse storeOrder) {
        if (storeOrder == null || storeOrder.getOrderDetails().isEmpty()) {
            log.warn("‚ö† Kh√¥ng c√≥ ƒë∆°n h√†ng ho·∫∑c chi ti·∫øt ƒë∆°n h√†ng ƒë·ªÉ g·ª≠i email.");
            return;
        }

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            String subject = "ƒê∆°n h√†ng #" + storeOrder.getOrderId() + " ƒë√£ s·∫µn s√†ng nh·∫≠n!";
            String qrContentId = "qrcode_" + UUID.randomUUID(); // T·∫°o ID duy nh·∫•t cho ·∫£nh QR

            // T·∫°o QR Code trong b·ªô nh·ªõ
            BufferedImage qrImage = qrCodeService.generateQRCode(String.valueOf(storeOrder.getOrderId()));
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ImageIO.write(qrImage, "PNG", baos);
            byte[] qrBytes = baos.toByteArray();

            // X√¢y d·ª±ng n·ªôi dung email
            StringBuilder body = new StringBuilder();
            body.append("<html><body>");
            body.append("<p>Th√¢n g·ª≠i <strong>").append(storeOrder.getUser().getFirstName())
                    .append(" ").append(storeOrder.getUser().getLastName()).append("</strong>,</p>");
            body.append("<p>R·∫•t c·∫£m ∆°n qu√Ω kh√°ch h√†ng ƒë√£ l·ª±a ch·ªçn mua s·∫Øm t·∫°i <strong>BrandShop</strong>.</p>");
            body.append("<p><strong>ƒê∆°n ƒë·∫∑t h√†ng c·ªßa qu√Ω kh√°ch hi·ªán ƒë√£ s·∫µn s√†ng ƒë·ªÉ nh·∫≠n.</strong></p>");
            body.append("<p>Vui l√≤ng ƒë·∫øn tr·ª±c ti·∫øp qu·∫ßy <strong>CLICK & COLLECT</strong> t·∫°i c·ª≠a h√†ng <strong>")
                    .append(storeOrder.getShippingAddress()).append("</strong>.</p>");
            body.append("<p>Xu·∫•t tr√¨nh m√£ QR b√™n d∆∞·ªõi ho·∫∑c m√£ v·∫°ch th√†nh vi√™n ƒë·ªÉ nh·∫≠n h√†ng.</p>");

            // Hi·ªÉn th·ªã m√£ QR trong email
            body.append("<p><img src='cid:").append(qrContentId).append("' width='300' height='300'/></p>");

            // C·ªông 7 ng√†y v√†o updatedAt
            LocalDate lastPickupDate = storeOrder.getUpdatedAt().plusDays(7).toLocalDate();

            body.append("<p><strong style='color: red;'>Ng√†y cu·ªëi c√πng c√≥ th·ªÉ l·∫•y h√†ng: ")
                    .append(lastPickupDate.format(DateTimeFormatter.ofPattern("dd/MM/yyyy")))
                    .append("</strong></p>");
            // Th√™m th√¥ng tin ƒë∆°n h√†ng
            body.append("<p><strong>M√£ ƒë∆°n h√†ng:</strong> ").append(storeOrder.getOrderId()).append("</p>");
            body.append("<p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> ").append(storeOrder.getUser().getFirstName())
                    .append(" ").append(storeOrder.getUser().getLastName()).append("</p>");
            body.append("<p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ").append(storeOrder.getUser().getPhone()).append("</p>");
            body.append("<p><strong>ƒê·ªãa ch·ªâ c·ª≠a h√†ng:</strong> ").append(storeOrder.getShippingAddress()).append("</p>");
            body.append("<p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ");
            if (storeOrder.getPaymentMethod().getMethodName().equals("Pay-in-store")) {
                body.append("Thanh to√°n t·∫°i c·ª≠a h√†ng");
            } else {
                body.append(storeOrder.getPaymentMethod().getMethodName());
            }
            body.append("</p>");
            body.append("<p><strong>Thu·∫ø:</strong> ").append(formatCurrency(storeOrder.getTaxAmount())).append("</p>");
            body.append("<p><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> ").append(formatCurrency(storeOrder.getShippingFee())).append("</p>");
            body.append("<p><strong>T·ªïng ti·ªÅn:</strong> ").append(formatCurrency(storeOrder.getTotalPrice())).append("</p>");

            // Chi ti·∫øt ƒë∆°n h√†ng
            body.append("<h3>Chi ti·∫øt ƒë∆°n h√†ng:</h3>");
            body.append(buildOrderDetailsHtml2(storeOrder.getOrderDetails()));


            body.append("<p>C·∫£m ∆°n qu√Ω kh√°ch v√† h·∫πn g·∫∑p l·∫°i!</p>");
            body.append("</body></html>");

            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(body.toString(), true);

            // G·∫Øn m√£ QR v√†o email
            helper.addInline(qrContentId, new ByteArrayResource(qrBytes), "image/png");

            int index = 0;
            for (StoreOrderDetailResponse detail : storeOrder.getOrderDetails()) {
                if (detail.getProductImage() != null) {
                    File imageFile = new File(Paths.get("uploads/images/products/", detail.getProductImage()).toString());
                    log.info("üìå ƒê∆∞·ªùng d·∫´n ·∫£nh: {}", imageFile.getAbsolutePath());

                    if (imageFile.exists()) {
                        FileSystemResource image = new FileSystemResource(imageFile);
                        String contentId = "image" + index++; // Ph·∫£i kh·ªõp v·ªõi `cid` trong HTML
                        helper.addInline(contentId, image);
                    } else {
                        log.warn("‚ö† H√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i: {}", imageFile.getAbsolutePath());
                    }
                }
            }

            mailSender.send(message);
            log.info("üìß ƒê√£ g·ª≠i email th√¥ng b√°o ƒë∆°n h√†ng s·∫µn s√†ng nh·∫≠n ƒë·∫øn {}", to);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i email: {}", e.getMessage(), e);
        }
    }

    @Async
    public void sendPaymentSuccessEmail(String to, StoreOrderResponse storeOrder) {
        if (storeOrder == null) {
            log.warn("‚ö† Kh√¥ng c√≥ ƒë∆°n h√†ng ƒë·ªÉ g·ª≠i email.");
            return;
        }

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            String subject = "C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i BRAND!";

            // X√¢y d·ª±ng n·ªôi dung email
            StringBuilder body = new StringBuilder();
            body.append("<html><head><meta charset='UTF-8'></head><body>");
            body.append("<p>Th√¢n g·ª≠i <strong>").append(storeOrder.getUser().getFirstName())
                    .append(" ").append(storeOrder.getUser().getLastName()).append("</strong>,</p>");
            body.append("<p>R·∫•t c·∫£m ∆°n qu√Ω kh√°ch h√†ng ƒë√£ l·ª±a ch·ªçn mua s·∫Øm t·∫°i <strong>Brand</strong>.</p>");
            body.append("<p><strong>M√£ ƒë∆°n h√†ng:</strong> ").append(storeOrder.getOrderId()).append("</p>");
            body.append("<p><strong>Ng∆∞·ªùi nh·∫≠n:</strong> ").append(storeOrder.getUser().getFirstName())
                    .append(" ").append(storeOrder.getUser().getLastName()).append("</p>");
            body.append("<p><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> ").append(storeOrder.getUser().getPhone()).append("</p>");
            body.append("<p><strong>ƒê·ªãa ch·ªâ c·ª≠a h√†ng:</strong> ").append(storeOrder.getShippingAddress()).append("</p>");
            body.append("<p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ");
            if (storeOrder.getPaymentMethod().getMethodName().equals("Pay-in-store")) {
                body.append("Thanh to√°n t·∫°i c·ª≠a h√†ng");
            } else {
                body.append(storeOrder.getPaymentMethod().getMethodName());
            }
            body.append("</p>");
            body.append("<p><strong>Thu·∫ø:</strong> ").append(formatCurrency(storeOrder.getTaxAmount())).append("</p>");
            body.append("<p><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> ").append(formatCurrency(storeOrder.getShippingFee())).append("</p>");
            body.append("<p><strong>T·ªïng ti·ªÅn:</strong> ").append(formatCurrency(storeOrder.getTotalPrice())).append("</p>");


            body.append("<h3>Chi ti·∫øt ƒë∆°n h√†ng:</h3>");
            body.append(buildOrderDetailsHtml2(storeOrder.getOrderDetails()));

            body.append("<p> C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng BRAND! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!</p>");
            body.append("</body></html>");

            helper.setTo(to);
            helper.setSubject(subject);
            helper.setText(body.toString(), true);

            int index = 0;
            for (StoreOrderDetailResponse detail : storeOrder.getOrderDetails()) {
                if (detail.getProductImage() != null) {
                    File imageFile = new File(Paths.get("uploads/images/products/", detail.getProductImage()).toString());
                    log.info("üìå ƒê∆∞·ªùng d·∫´n ·∫£nh: {}", imageFile.getAbsolutePath());

                    if (imageFile.exists()) {
                        FileSystemResource image = new FileSystemResource(imageFile);
                        String contentId = "image" + index++; // Ph·∫£i kh·ªõp v·ªõi `cid` trong HTML
                        helper.addInline(contentId, image);
                    } else {
                        log.warn("‚ö† H√¨nh ·∫£nh kh√¥ng t·ªìn t·∫°i: {}", imageFile.getAbsolutePath());
                    }
                }
            }

            mailSender.send(message);
            log.info("üìß ƒê√£ g·ª≠i email x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng ƒë·∫øn {}", to);
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i email x√°c nh·∫≠n thanh to√°n: {}", e.getMessage());
            e.printStackTrace();
        }
    }


    private String formatCurrency(double amount) {
        NumberFormat formatter = NumberFormat.getInstance(new Locale("vi", "VN"));
        return formatter.format(amount) + " VNƒê";
    }


}
