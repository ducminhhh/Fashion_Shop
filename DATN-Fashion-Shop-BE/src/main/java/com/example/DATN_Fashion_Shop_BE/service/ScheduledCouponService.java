package com.example.DATN_Fashion_Shop_BE.service;

import com.example.DATN_Fashion_Shop_BE.config.CouponConfig;
import com.example.DATN_Fashion_Shop_BE.dto.CouponTranslationDTO;
import com.example.DATN_Fashion_Shop_BE.model.Coupon;
import com.example.DATN_Fashion_Shop_BE.model.Holiday;
import com.example.DATN_Fashion_Shop_BE.model.User;
import com.example.DATN_Fashion_Shop_BE.repository.CouponRepository;
import com.example.DATN_Fashion_Shop_BE.repository.HolidayRepository;
import com.example.DATN_Fashion_Shop_BE.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class ScheduledCouponService {
    private final CouponConfigService couponConfigService; ;
    private final CouponRepository couponRepository;
    private final UserRepository userRepository;
    private final CouponService couponService;
    private final EmailService emailService;
    private final FileStorageService fileStorageService;
    private  final HolidayRepository holidayRepository;
    private final HolidayCouponTranslationService holidayCouponTranslationService;
//
    @Scheduled(cron = "0 0 0 * * ?")
//   @Scheduled(cron = "0 * * * * ?")
    public void generateDailyCoupons() {
        LocalDate today = LocalDate.now();
        log.info("üîÑ Ki·ªÉm tra v√† t·∫°o m√£ gi·∫£m gi√° cho ng√†y {}", today);

        // üéä Ki·ªÉm tra v√† t·∫°o m√£ gi·∫£m gi√° cho ng√†y l·ªÖ
        generateHolidayCoupons(today);

        // üéÇ Ki·ªÉm tra v√† t·∫°o m√£ gi·∫£m gi√° sinh nh·∫≠t cho kh√°ch h√†ng
        generateBirthdayCoupons(today);
    }

    private void generateHolidayCoupons(LocalDate today) {
        List<Holiday> holidaysToday = holidayRepository.findByDate(today);
        List<User> allUsers = userRepository.findAll();
        List<User> femaleUsers = userRepository.findByGender("FEMALE");
        for (Holiday holiday : holidaysToday) {
            String holidayKey = couponConfigService.normalizeString(holiday.getHolidayName());
            String couponCode = holidayKey + "_" + today;
            CouponConfig config = couponConfigService.getCouponConfig(holidayKey);
            if (config == null) {
                log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh m√£ gi·∫£m gi√° cho {}! B·ªè qua.", holiday.getHolidayName());
                continue;
            }
            // ‚úÖ L·∫•y b·∫£n d·ªãch t·ª´ b·∫£ng history_translation
            List<CouponTranslationDTO> translations = holidayCouponTranslationService.getTranslationsByType(holidayKey);
            if (translations.isEmpty()) {
                translations = holidayCouponTranslationService.getTranslationsByType("HOLIDAY"); // L·∫•y m·∫∑c ƒë·ªãnh
            }

            // N·∫øu KH√îNG ph·∫£i ng√†y l·ªÖ d√†nh ri√™ng cho ph·ª• n·ªØ => t·∫°o m√£ gi·∫£m gi√° cho t·∫•t c·∫£
            if (!isWomenHoliday(holiday.getHolidayName())) {
                if (!couponRepository.existsByCode(couponCode)) {
                    Coupon coupon = couponService.createCouponForAllUser(
                            couponCode,
                            config.getDiscountType(),
                            config.getDiscountValue(),
                            config.getMinOrderValue(),
                            config.getExpirationDays(),
                            true,
                            config.getImageUrl(),
                            translations // ‚úÖ S·ª≠ d·ª•ng b·∫£n d·ªãch t·ª´ DB
                    );
                    log.info("üéä ƒê√£ t·∫°o m√£ gi·∫£m gi√° ng√†y l·ªÖ: {}!", coupon.getCode());

                    for (User user : allUsers) {
                        emailService.sendCouponEmail(user.getEmail(), coupon.getCode(), config.getExpirationDays(), holidayKey,"vi");
                    }
                }
            }

            // N·∫øu l√† ng√†y l·ªÖ d√†nh cho ph·ª• n·ªØ, ch·ªâ t·∫°o m√£ cho n·ªØ
            if (isWomenHoliday(holiday.getHolidayName())) {
                String womenCouponCode = "WOMEN_" + holidayKey + "_" + today;
                if (!couponRepository.existsByCode(womenCouponCode)) {
                    for (User user : femaleUsers) {
                        Coupon coupon = couponService.createCouponForUser(
                                womenCouponCode,
                                config.getDiscountType(),
                                config.getDiscountValue(),
                                config.getMinOrderValue(),
                                config.getExpirationDays(),
                                user,
                                config.getImageUrl(),
                                translations // ‚úÖ S·ª≠ d·ª•ng b·∫£n d·ªãch t·ª´ DB
                        );
                        log.info("üíñ ƒê√£ t·∫°o m√£ gi·∫£m gi√° {} cho user: {}", coupon.getCode(), user.getEmail());

                        emailService.sendCouponEmail(user.getEmail(), coupon.getCode() , config.getExpirationDays(), holidayKey,"vi");
                    }
                }
            }
        }
    }



    public boolean isWomenHoliday(String holidayName) {
        List<String> womenHolidays = List.of("Ng√†y Qu·ªëc t·∫ø Ph·ª• n·ªØ", "Ng√†y Ph·ª• n·ªØ Vi·ªát Nam");
        return womenHolidays.contains(holidayName);
    }

    public void generateBirthdayCoupons(LocalDate today) {
        List<User> usersWithBirthday = userRepository.findByDateOfBirth(today);
        CouponConfig config = couponConfigService.getCouponConfig("sinhnhat");
        if (config == null) {
            log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh m√£ gi·∫£m gi√° sinh nh·∫≠t! B·ªè qua vi·ªác t·∫°o m√£.");
            return;
        }

        // ‚úÖ L·∫•y danh s√°ch b·∫£n d·ªãch t·ª´ b·∫£ng history_translation
        List<CouponTranslationDTO> translations = holidayCouponTranslationService.getTranslationsByType("sinhnhat");
        if (translations.isEmpty()) {
            translations = holidayCouponTranslationService.getTranslationsByType("sinhnhat"); // L·∫•y m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
        }

        String imageUrl = config.getImageUrl() != null ? config.getImageUrl() : "/uploads/coupons/BdayCoupon.png";

        for (User user : usersWithBirthday) {
            String couponCode = "BDAY_" + user.getId() + "_" + today.getYear();
            if (!couponRepository.existsByCode(couponCode)) {
                Coupon coupon = couponService.createCouponForUser(
                        couponCode,
                        config.getDiscountType(),
                        config.getDiscountValue(),
                        config.getMinOrderValue(),
                        config.getExpirationDays(),
                        user,
                        imageUrl,
                        translations // ‚úÖ S·ª≠ d·ª•ng b·∫£n d·ªãch t·ª´ DB
                );

                log.info("üéÇ ƒê√£ t·∫°o m√£ gi·∫£m gi√° sinh nh·∫≠t {} cho user {}!", coupon.getCode(), user.getEmail());
                emailService.sendCouponEmail(user.getEmail(), coupon.getCode(),  config.getExpirationDays(), "sinhnhat","vi");
            }
        }
    }





}


